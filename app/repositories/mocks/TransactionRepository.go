// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	models "aquaculture/models"

	mock "github.com/stretchr/testify/mock"
)

// TransactionRepository is an autogenerated mock type for the TransactionRepository type
type TransactionRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: tReq
func (_m *TransactionRepository) Create(tReq models.TransactionRequest) (models.Transaction, error) {
	ret := _m.Called(tReq)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 models.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(models.TransactionRequest) (models.Transaction, error)); ok {
		return rf(tReq)
	}
	if rf, ok := ret.Get(0).(func(models.TransactionRequest) models.Transaction); ok {
		r0 = rf(tReq)
	} else {
		r0 = ret.Get(0).(models.Transaction)
	}

	if rf, ok := ret.Get(1).(func(models.TransactionRequest) error); ok {
		r1 = rf(tReq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *TransactionRepository) GetAll() ([]models.Transaction, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Transaction, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Transaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *TransactionRepository) GetByID(id string) (models.Transaction, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 models.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.Transaction, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.Transaction); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Transaction)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: tReq, id
func (_m *TransactionRepository) Update(tReq models.TransactionRequest, id string) (models.Transaction, error) {
	ret := _m.Called(tReq, id)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 models.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(models.TransactionRequest, string) (models.Transaction, error)); ok {
		return rf(tReq, id)
	}
	if rf, ok := ret.Get(0).(func(models.TransactionRequest, string) models.Transaction); ok {
		r0 = rf(tReq, id)
	} else {
		r0 = ret.Get(0).(models.Transaction)
	}

	if rf, ok := ret.Get(1).(func(models.TransactionRequest, string) error); ok {
		r1 = rf(tReq, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTransactionRepository creates a new instance of TransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionRepository {
	mock := &TransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
