// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	models "aquaculture/models"

	mock "github.com/stretchr/testify/mock"
)

// ProductTypeRepository is an autogenerated mock type for the ProductTypeRepository type
type ProductTypeRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ptReq
func (_m *ProductTypeRepository) Create(ptReq models.ProductTypeRequest) (models.ProductType, error) {
	ret := _m.Called(ptReq)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 models.ProductType
	var r1 error
	if rf, ok := ret.Get(0).(func(models.ProductTypeRequest) (models.ProductType, error)); ok {
		return rf(ptReq)
	}
	if rf, ok := ret.Get(0).(func(models.ProductTypeRequest) models.ProductType); ok {
		r0 = rf(ptReq)
	} else {
		r0 = ret.Get(0).(models.ProductType)
	}

	if rf, ok := ret.Get(1).(func(models.ProductTypeRequest) error); ok {
		r1 = rf(ptReq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *ProductTypeRepository) Delete(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields:
func (_m *ProductTypeRepository) GetAll() ([]models.ProductType, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.ProductType
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.ProductType, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.ProductType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ProductType)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *ProductTypeRepository) GetByID(id string) (models.ProductType, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 models.ProductType
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.ProductType, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.ProductType); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.ProductType)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ptReq, id
func (_m *ProductTypeRepository) Update(ptReq models.ProductTypeRequest, id string) (models.ProductType, error) {
	ret := _m.Called(ptReq, id)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 models.ProductType
	var r1 error
	if rf, ok := ret.Get(0).(func(models.ProductTypeRequest, string) (models.ProductType, error)); ok {
		return rf(ptReq, id)
	}
	if rf, ok := ret.Get(0).(func(models.ProductTypeRequest, string) models.ProductType); ok {
		r0 = rf(ptReq, id)
	} else {
		r0 = ret.Get(0).(models.ProductType)
	}

	if rf, ok := ret.Get(1).(func(models.ProductTypeRequest, string) error); ok {
		r1 = rf(ptReq, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProductTypeRepository creates a new instance of ProductTypeRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductTypeRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductTypeRepository {
	mock := &ProductTypeRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
